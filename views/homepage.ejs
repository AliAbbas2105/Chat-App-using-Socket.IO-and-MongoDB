<!DOCTYPE html>
<html>
  <head>
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <title>Socket.IO chat</title>
    <style>
      body { margin: 0; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; }
      .header {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        height: 60px;
        background: #e0eaff;
        border-bottom: 1px solid #ccc;
        z-index: 100;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      .container {
        display: flex;
        height: calc(100vh - 60px);
        margin-top: 60px;
      }
      .sidebar {
        width: 300px;
        background: #f7f7f7;
        border-right: 1px solid #ddd;
        display: flex;
        flex-direction: column;
        position: relative;
        height: 100%;
      }
      .sidebar-content {
        flex: 1 1 auto;
        overflow-y: auto;
        padding-bottom: 60px; /* space for currentUserBox */
      }
      .search-bar {
        padding: 1rem;
        border-bottom: 1px solid #ddd;
        background: #f7f7f7;
        position: sticky;
        top: 0;
        z-index: 2;
      }
      .user-list {
        list-style: none;
        margin: 0;
        padding: 0;
      }
      .user-list li {
        padding: 0.75rem 1rem;
        cursor: pointer;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid #eee;
        transition: background 0.2s;
      }
      .user-list li.selected {
        background: #e0eaff;
      }
      .unread-badge {
        background: #ff5252;
        color: #fff;
        border-radius: 10px;
        padding: 2px 8px;
        font-size: 0.8em;
        margin-left: 8px;
      }
      #currentUserBox {
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        background: #e0eaff;
        border-top: 1px solid #ccc;
        padding: 1rem;
        font-weight: bold;
        text-align: center;
        z-index: 2;
      }
      .chat-area {
        flex: 1;
        display: flex;
        flex-direction: column;
        position: relative;
        background: #f4f6fa;
        height: 100%;
      }
      #messages { list-style-type: none; margin: 0; padding: 1rem 0 4rem 0; display: flex; flex-direction: column; flex: 1; overflow-y: auto; }
      #messages > li {
        padding: 0.5rem 1rem;
        border-radius: 10px;
        margin: 0.5rem;
        word-break: break-word;
        display: block;
        clear: both;
      }
      .sent {
        background: #d1ffd6;
        align-self: flex-end;
        margin-left: auto;
        margin-right: 1rem;
        max-width: 60%;
        border-radius: 10px;
        text-align: left;
      }
      .received {
        background: #efefef;
        align-self: flex-start;
        margin-right: auto;
        margin-left: 1rem;
        max-width: 60%;
        border-radius: 10px;
        text-align: left;
      }
      #form {
        background: #fff;
        padding: 0.5rem 1rem;
        position: fixed;
        bottom: 0;
        left: 300px;
        right: 0;
        display: flex;
        height: 3.5rem;
        box-sizing: border-box;
        border-top: 1px solid #ddd;
        z-index: 10;
      }
      #input {
        border: 1px solid #ccc;
        padding: 0 1rem;
        flex-grow: 1;
        border-radius: 2rem;
        margin: 0.25rem;
        font-size: 1rem;
      }
      #input:focus { outline: none; border-color: #888; }
      #form > button {
        background: #333;
        border: none;
        padding: 0 1.5rem;
        margin: 0.25rem;
        border-radius: 2rem;
        outline: none;
        color: #fff;
        font-size: 1rem;
        font-weight: bold;
        transition: background 0.2s;
      }
      #form > button:hover { background: #222; }
    </style>
  </head>
  <body>
    <div class="header">
      <h2 style="margin: 0;">Welcome to Code Xperts Chat!</h2>
    </div>
    <div class="container">
      <div class="sidebar">
        <div class="sidebar-content">
          <div class="search-bar">
            <input id="searchInput" type="text" placeholder="Search or start a new chat" style="width: 90%; padding: 0.5rem; border-radius: 5px; border: 1px solid #ccc;" />
          </div>
          <ul id="userList" class="user-list"></ul>
        </div>
        <div id="currentUserBox">
          <span id="currentUserName"></span>
        </div>
      </div>
      <div class="chat-area">
        <ul id="messages"></ul>
      </div>
    </div>
    <form id="form" action="">
      <input id="input" autocomplete="off" placeholder="Type a message..." />
      <button>Send</button>
    </form>
    <script src="/socket.io/socket.io.js"></script>
    <script>
      const CURRENT_USER = "<%= username %>";
      const socket = io();
      const form = document.getElementById('form');
      const input = document.getElementById('input');
      const messages = document.getElementById('messages');
      const userList = document.getElementById('userList');
      const searchInput = document.getElementById('searchInput');
      const currentUserName = document.getElementById('currentUserName');
      currentUserName.textContent = CURRENT_USER;

      let selectedUser = null;
      let users = [];
      let unreadCounts = {};
      let chatHistory = {};

      // Fetch chatted users on load
      async function fetchChattedUsers() {
        const res = await fetch('/users/chatted');
        users = await res.json();
        renderUserList(users);
      }

      // Fetch chat history with a user
      async function fetchChatHistory(userId) {
        const res = await fetch(`/messages/history/${userId}`);
        const history = await res.json();
        chatHistory[userId] = history;
        renderMessages(history);
        scrollToBottom();
      }

      // Search users
      async function searchUsers(query) {
        if (!query) {
          fetchChattedUsers();
          return;
        }
        const res = await fetch(`/users/search?q=${encodeURIComponent(query)}`);
        users = await res.json();
        renderUserList(users);
      }

      // Render user list
      function renderUserList(users) {
        userList.innerHTML = '';
        users.forEach(user => {
          const li = document.createElement('li');
          li.textContent = user.username;
          if (unreadCounts[user._id]) {
            const badge = document.createElement('span');
            badge.className = 'unread-badge';
            badge.textContent = unreadCounts[user._id];
            li.appendChild(badge);
          }
          if (selectedUser && selectedUser._id === user._id) {
            li.classList.add('selected');
          }
          li.onclick = () => selectUser(user);
          userList.appendChild(li);
        });
      }

      // Render messages
      function renderMessages(msgs) {
        messages.innerHTML = '';
        msgs.forEach(msg => {
          const item = document.createElement('li');
          item.innerHTML = `<strong>${msg.senderName || msg.sender}:</strong> ${msg.content || msg.text}`;
          if ((msg.senderName && msg.senderName === CURRENT_USER) || (msg.sender === CURRENT_USER)) {
            item.className = 'sent';
          } else {
            item.className = 'received';
          }
          messages.appendChild(item);
        });
        scrollToBottom();
      }

      // Scroll to bottom of messages
      function scrollToBottom() {
        messages.scrollTop = messages.scrollHeight;
      }

      // Select a user to chat with
      function selectUser(user) {
        selectedUser = user;
        renderUserList(users);
        fetchChatHistory(user._id);
        // Mark messages as read
        socket.emit('mark as read', { withUserId: user._id });
        unreadCounts[user._id] = 0;
      }

      // Handle sending a message
      form.addEventListener('submit', (e) => {
        e.preventDefault();
        if (input.value && selectedUser) {
          socket.emit('private message', { toUserId: selectedUser._id, text: input.value });
          input.value = '';
        }
      });

      // Handle receiving a private message
      socket.on('private message', (msg) => {
        // If chat is open with sender or you are the sender, show message
        if (selectedUser && (msg.sender === selectedUser._id || msg.senderName === CURRENT_USER)) {
          if (!chatHistory[selectedUser._id]) chatHistory[selectedUser._id] = [];
          chatHistory[selectedUser._id].push(msg);
          renderMessages(chatHistory[selectedUser._id]);
        } else {
          // If chat is not open, increment unread count
          const otherId = msg.sender === CURRENT_USER ? msg.recipient : msg.sender;
          unreadCounts[otherId] = (unreadCounts[otherId] || 0) + 1;
          renderUserList(users);
        }
        scrollToBottom();
      });

      // Search bar event
      searchInput.addEventListener('input', (e) => {
        searchUsers(e.target.value);
      });

      // Initial load
      fetchChattedUsers();

      socket.on('tokenExpired', () => {
        alert('Session expired or not logged in. Please log in again.');
        window.location.href = '/login';
      });
    </script>
  </body>
</html>